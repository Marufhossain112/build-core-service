// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String @id @default(uuid())
  name String
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  faculties          Faculty[]
  students           Student[]
  academicDepartment AcademicDepartment[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  Faculties         Faculty[]
  Students          Student[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String
  firstName            String
  middleName           String
  lastName             String
  profileImage         String
  email                String
  contactNo            String
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String

  @@map("students")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String
  firstName            String
  middleName           String
  lastName             String
  profileImage         String
  email                String
  contactNo            String
  gender               String
  bloodGroup           String
  designation          String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  faculties            CourseFaculty[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  prerequisite    CourseToPrerequisite[] @relation("courseToPrerequisite")
  prerequisiteFor CourseToPrerequisite[] @relation("prerequisiteToCourse")
  courses         CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  prerequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "courseToPrerequisite")
  prerequisite   Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                   String                      @id @default(uuid())
  startDate            DateTime
  endDate              DateTime
  status               SemesterRegistrationStatus? @default(UPCOMING)
  minCredit            Int                         @default(0)
  maxCredit            Int                         @default(0)
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  academicSemesterId   String
  academicSemester     AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  offeredCourses       OfferedCourse[]
  OfferedCourseSection OfferedCourseSection[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id                     String                 @id @default(uuid())
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  courseId               String
  course                 Course                 @relation(fields: [courseId], references: [id])
  academicDepartmentId   String
  academicDepartment     AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  OfferedCourseSection   OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String               @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId   String
  semesterRegistration     SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offered_course_section")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
