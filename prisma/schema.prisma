// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(uuid())
  studentId  String
  name       String
  email      String @unique
  password   String
  role       Role
  contactNo  String
  address    String
  profileImg String

  @@map("users")
}

model AcademicSemester {
  id                     String                  @id @default(uuid())
  year                   Int
  title                  String
  code                   String
  isCurrent              Boolean                 @default(false)
  startMonth             String
  endMonth               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  students               Student[]
  semesterRegistrations  SemesterRegistration[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  faculties          Faculty[]
  students           Student[]
  academicDepartment AcademicDepartment[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  Faculties         Faculty[]
  Students          Student[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id                                 String                              @id @default(uuid())
  studentId                          String
  firstName                          String
  middleName                         String
  lastName                           String
  profileImage                       String
  email                              String
  role                               Role
  password                           String
  contactNo                          String
  gender                             String
  bloodGroup                         String
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId                 String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId               String
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId                  String
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentEnrolledCourses             StudentEnrolledCourse[]

  @@map("students")
}

model Faculty {
  id                          String                       @id @default(uuid())
  facultyId                   String
  firstName                   String
  middleName                  String
  lastName                    String
  profileImage                String
  email                       String
  contactNo                   String
  gender                      String
  bloodGroup                  String
  designation                 String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId        String
  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId           String
  faculties                   CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                     String                  @id @default(uuid())
  title                  String
  code                   String
  credits                Int
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  prerequisite           CourseToPrerequisite[]  @relation("courseToPrerequisite")
  prerequisiteFor        CourseToPrerequisite[]  @relation("prerequisiteToCourse")
  courses                CourseFaculty[]
  offeredCourses         OfferedCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  prerequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "courseToPrerequisite")
  prerequisite   Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                          Int                                 @default(0)
  maxCredit                          Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourses                     OfferedCourse[]
  OfferedCourseSection               OfferedCourseSection[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id                                 String                              @id @default(uuid())
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  courseId                           String
  course                             Course                              @relation(fields: [courseId], references: [id])
  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  OfferedCourseSection               OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                                 String                              @id @default(uuid())
  title                              String
  maxCapacity                        Int
  currentlyEnrolledStudent           Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  offeredCourseId                    String
  offeredCourse                      OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  dayOfWeek              WeekDays             @default(SATURDAY)
  startTime              String
  endTime                String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])

  @@map("student_semester_registration")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_course")
}

model StudentEnrolledCourse {
  id                 String                       @id @default(uuid())
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  studentId          String
  student            Student                      @relation(fields: [studentId], references: [id])
  courseId           String
  course             Course                       @relation(fields: [courseId], references: [id])
  academicSemesterId String
  academicSemester   AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  grade              String?
  point              Float?                       @default(0)
  totalMarks         Int?                         @default(0)
  status             StudentEnrolledCourseStatus? @default(ONGOING)
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  admin
  customer
  student
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
